# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tableau-server-utility-tool.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime

import tableauserverclient as TSC

TABLEAU_SERVER_PROD_URL = "https://tableau.roktinternal.com/"
TABLEAU_SERVER_QA_URL = "https://tableau-qa.roktinternal.com/"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1233, 574)
        MainWindow.setToolTipDuration(-34)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.loginGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.loginGroupBox.setGeometry(QtCore.QRect(20, 10, 621, 101))
        self.loginGroupBox.setObjectName("loginGroupBox")
        self.loginEnvLabel = QtWidgets.QLabel(self.loginGroupBox)
        self.loginEnvLabel.setGeometry(QtCore.QRect(13, 34, 81, 16))
        self.loginEnvLabel.setObjectName("loginEnvLabel")
        self.loginComboBox = QtWidgets.QComboBox(self.loginGroupBox)
        self.loginComboBox.setGeometry(QtCore.QRect(101, 30, 151, 26))
        self.loginComboBox.setEditable(False)
        self.loginComboBox.setObjectName("loginComboBox")
        self.loginComboBox.addItem("")
        self.loginComboBox.addItem("")
        self.loginUserLabel = QtWidgets.QLabel(self.loginGroupBox)
        self.loginUserLabel.setGeometry(QtCore.QRect(273, 33, 81, 16))
        self.loginUserLabel.setObjectName("loginUserLabel")
        self.loginUserLineEdit = QtWidgets.QLineEdit(self.loginGroupBox)
        self.loginUserLineEdit.setGeometry(QtCore.QRect(350, 31, 151, 21))
        self.loginUserLineEdit.setObjectName("loginUserLineEdit")
        self.loginPwdLineEdit = QtWidgets.QLineEdit(self.loginGroupBox)
        self.loginPwdLineEdit.setGeometry(QtCore.QRect(350, 61, 151, 21))
        self.loginPwdLineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.loginPwdLineEdit.setObjectName("loginPwdLineEdit")
        self.loginPwdLabel = QtWidgets.QLabel(self.loginGroupBox)
        self.loginPwdLabel.setGeometry(QtCore.QRect(277, 63, 81, 16))
        self.loginPwdLabel.setObjectName("loginPwdLabel")

        self.loginPushButton = QtWidgets.QPushButton(
            self.loginGroupBox, clicked=lambda: self.tableauServerLogin()
        )

        self.loginPushButton.setGeometry(QtCore.QRect(523, 25, 81, 32))
        self.loginPushButton.setDefault(True)
        self.loginPushButton.setObjectName("loginPushButton")

        self.loginUserLineEdit.returnPressed.connect(
            self.loginPushButton.click)
        self.loginPwdLineEdit.returnPressed.connect(self.loginPushButton.click)

        self.loginSuccessLabel = QtWidgets.QLabel(self.loginGroupBox)
        self.loginSuccessLabel.setEnabled(True)
        self.loginSuccessLabel.setGeometry(QtCore.QRect(108, 58, 150, 30))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.loginSuccessLabel.setFont(font)
        self.loginSuccessLabel.setText("")
        self.loginSuccessLabel.setObjectName("loginSuccessLabel")
        self.loginLogoutPushButton = QtWidgets.QPushButton(
            self.loginGroupBox, clicked=lambda: self.tableauServerLogout()
        )
        self.loginLogoutPushButton.setEnabled(False)
        self.loginLogoutPushButton.setGeometry(QtCore.QRect(523, 55, 81, 32))
        self.loginLogoutPushButton.setDefault(False)
        self.loginLogoutPushButton.setObjectName("loginLogoutPushButton")
        self.loginStatusLabel = QtWidgets.QLabel(self.loginGroupBox)
        self.loginStatusLabel.setGeometry(QtCore.QRect(29, 62, 61, 20))
        self.loginStatusLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.loginStatusLabel.setObjectName("loginStatusLabel")
        self.toolsTabWidget = QtWidgets.QTabWidget(self.centralwidget)

        self.toolsTabWidget.setEnabled(False)

        self.toolsTabWidget.setGeometry(QtCore.QRect(20, 130, 1195, 381))
        self.toolsTabWidget.setObjectName("toolsTabWidget")
        self.extractTab = QtWidgets.QWidget()
        self.extractTab.setObjectName("extractTab")

        self.extractTabGetJobsPushButton = QtWidgets.QPushButton(
            self.extractTab, clicked=lambda: self.tableauServerGetJobs()
        )

        self.extractTabGetJobsPushButton.setGeometry(
            QtCore.QRect(437, 11, 131, 32))
        self.extractTabGetJobsPushButton.setAutoDefault(False)
        self.extractTabGetJobsPushButton.setObjectName(
            "extractTabGetJobsPushButton")
        self.extractTabJobTableWidget = QtWidgets.QTableWidget(self.extractTab)
        self.extractTabJobTableWidget.setGeometry(
            QtCore.QRect(10, 50, 1171, 251))
        self.extractTabJobTableWidget.setObjectName("extractTabJobTableWidget")
        self.extractTabJobTableWidget.setColumnCount(10)
        self.extractTabJobTableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.extractTabJobTableWidget.setHorizontalHeaderItem(9, item)

        self.extractTabJobTableWidget.setColumnWidth(0, 30)
        self.extractTabJobTableWidget.setColumnWidth(1, 200)
        self.extractTabJobTableWidget.setColumnWidth(2, 100)
        self.extractTabJobTableWidget.setColumnWidth(3, 100)
        self.extractTabJobTableWidget.setColumnWidth(4, 60)
        self.extractTabJobTableWidget.setColumnWidth(5, 150)
        self.extractTabJobTableWidget.setColumnWidth(6, 100)
        self.extractTabJobTableWidget.setColumnWidth(7, 150)
        self.extractTabJobTableWidget.setColumnWidth(8, 100)
        self.extractTabJobTableWidget.setColumnWidth(9, 180)
        self.extractTabcheckBoxDictionary = {}
        self.extractTabTerminateJobsList = []

        self.extractTabTerminateJobsPushButton = QtWidgets.QPushButton(
            self.extractTab, clicked=lambda: self.extractTabTerminateJobsWarning()
        )

        self.extractTabTerminateJobsPushButton.setGeometry(
            QtCore.QRect(390, 310, 151, 32)
        )
        self.extractTabTerminateJobsPushButton.setObjectName(
            "extractTabTerminateJobsPushButton"
        )
        self.extractTabSearchJobLineEdit = QtWidgets.QLineEdit(self.extractTab)
        self.extractTabSearchJobLineEdit.setEnabled(False)
        self.extractTabSearchJobLineEdit.setGeometry(
            QtCore.QRect(273, 15, 131, 21))

        self.extractTabSearchJobLineEdit.returnPressed.connect(
            self.extractTabGetJobsPushButton.click
        )

        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(196, 197, 200))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(196, 197, 200))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(236, 236, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.extractTabSearchJobLineEdit.setPalette(palette)
        self.extractTabSearchJobLineEdit.setAutoFillBackground(False)
        self.extractTabSearchJobLineEdit.setReadOnly(False)
        self.extractTabSearchJobLineEdit.setObjectName(
            "extractTabSearchJobLineEdit")
        self.extractTabJobComboBox = QtWidgets.QComboBox(self.extractTab)
        self.extractTabJobComboBox.setGeometry(QtCore.QRect(57, 13, 131, 26))
        self.extractTabJobComboBox.setEditable(False)
        self.extractTabJobComboBox.setObjectName("extractTabJobComboBox")
        self.extractTabJobComboBox.addItem("")
        self.extractTabJobComboBox.addItem("")
        self.extractTabJobComboBox.addItem("")
        self.extractTabJobComboBox.addItem("")

        self.extractTabJobComboBox.currentIndexChanged.connect(
            self.extractTabJobComboBoxChange, self.extractTabJobComboBox.currentIndex()
        )

        self.extractTabSelectAllJobsPushButton = QtWidgets.QPushButton(
            self.extractTab, clicked=lambda: self.allTabsCheckBoxes(
                "extractTab", True)
        )

        self.extractTabSelectAllJobsPushButton.setGeometry(
            QtCore.QRect(10, 310, 121, 32)
        )
        self.extractTabSelectAllJobsPushButton.setObjectName(
            "extractTabSelectAllJobsPushButton"
        )

        self.extractTabDeselectAllJobsPushButton = QtWidgets.QPushButton(
            self.extractTab, clicked=lambda: self.allTabsCheckBoxes(
                "extractTab", False)
        )

        self.extractTabDeselectAllJobsPushButton.setGeometry(
            QtCore.QRect(130, 310, 131, 32)
        )
        self.extractTabDeselectAllJobsPushButton.setObjectName(
            "extractTabDeselectAllJobsPushButton"
        )

        self.extractTabClearPushButton = QtWidgets.QPushButton(
            self.extractTab, clicked=lambda: self.allTabsTableWidgetClear(
                "extractTab")
        )

        self.extractTabClearPushButton.setGeometry(
            QtCore.QRect(260, 310, 131, 32))
        self.extractTabClearPushButton.setObjectName(
            "extractTabClearPushButton")
        self.extractTabJobsLabel = QtWidgets.QLabel(self.extractTab)
        self.extractTabJobsLabel.setGeometry(QtCore.QRect(-3, 17, 51, 16))
        self.extractTabJobsLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.extractTabJobsLabel.setObjectName("extractTabJobsLabel")
        self.extractTabJobSearchLabel = QtWidgets.QLabel(self.extractTab)
        self.extractTabJobSearchLabel.setGeometry(
            QtCore.QRect(210, 17, 51, 16))
        self.extractTabJobSearchLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.extractTabJobSearchLabel.setObjectName("extractTabJobSearchLabel")
        self.toolsTabWidget.addTab(self.extractTab, "")
        # SPACE
        self.ownersTab = QtWidgets.QWidget()
        self.ownersTab.setObjectName("ownersTab")
        self.ownersTabContentTableWidget = QtWidgets.QTableWidget(
            self.ownersTab)
        self.ownersTabContentTableWidget.setGeometry(
            QtCore.QRect(10, 50, 1171, 251))
        self.ownersTabContentTableWidget.setObjectName(
            "ownersTabContentTableWidget")
        self.ownersTabContentTableWidget.setColumnCount(10)
        self.ownersTabContentTableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.ownersTabContentTableWidget.setHorizontalHeaderItem(9, item)

        self.ownersTabContentTableWidget.setColumnWidth(0, 30)
        self.ownersTabContentTableWidget.setColumnWidth(1, 200)
        self.ownersTabContentTableWidget.setColumnWidth(2, 80)
        self.ownersTabContentTableWidget.setColumnWidth(3, 150)
        self.ownersTabContentTableWidget.setColumnWidth(4, 60)
        self.ownersTabContentTableWidget.setColumnWidth(5, 150)
        self.ownersTabContentTableWidget.setColumnWidth(6, 150)
        self.ownersTabContentTableWidget.setColumnWidth(7, 70)
        self.ownersTabContentTableWidget.setColumnWidth(8, 100)
        self.ownersTabContentTableWidget.setColumnWidth(9, 180)
        self.ownersTabChangeOwnerList = []
        self.ownersTabcheckBoxDictionary = {}

        self.ownersTabLoadOwnersPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.ownersTabLoadOwners()
        )

        self.ownersTabLoadOwnersPushButton.setGeometry(
            QtCore.QRect(7, 11, 121, 32))
        self.ownersTabLoadOwnersPushButton.setAutoDefault(True)
        self.ownersTabLoadOwnersPushButton.setObjectName(
            "ownersTabLoadOwnersPushButton"
        )
        self.ownersTabSelectOwnerLabel = QtWidgets.QLabel(self.ownersTab)
        self.ownersTabSelectOwnerLabel.setGeometry(
            QtCore.QRect(124, 15, 101, 20))
        self.ownersTabSelectOwnerLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.ownersTabSelectOwnerLabel.setObjectName(
            "ownersTabSelectOwnerLabel")
        self.ownersTabOwnersComboBox = QtWidgets.QComboBox(self.ownersTab)
        self.ownersTabOwnersComboBox.setGeometry(
            QtCore.QRect(235, 13, 161, 26))
        self.ownersTabOwnersComboBox.setEditable(False)
        self.ownersTabOwnersComboBox.setObjectName("ownersTabOwnersComboBox")

        self.ownersTabOwnersComboBox.currentIndexChanged.connect(
            self.ownersTabTableWidgetClear
        )

        self.ownersTabGetContentPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.ownersTabGetContent()
        )

        self.ownersTabGetContentPushButton.setGeometry(
            QtCore.QRect(437, 11, 131, 32))
        self.ownersTabGetContentPushButton.setAutoDefault(False)
        self.ownersTabGetContentPushButton.setObjectName(
            "ownersTabGetContentPushButton"
        )

        self.ownersTabSelectAllPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.allTabsCheckBoxes(
                "ownersTab", True)
        )

        self.ownersTabSelectAllPushButton.setGeometry(
            QtCore.QRect(10, 310, 121, 32))
        self.ownersTabSelectAllPushButton.setObjectName(
            "ownersTabSelectAllPushButton")

        self.ownersTabDeselectAllPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.allTabsCheckBoxes(
                "ownersTab", False)
        )

        self.ownersTabDeselectAllPushButton.setGeometry(
            QtCore.QRect(130, 310, 131, 32))
        self.ownersTabDeselectAllPushButton.setObjectName(
            "ownersTabDeselectAllPushButton"
        )

        self.ownersTabClearPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.allTabsTableWidgetClear(
                "ownersTab")
        )

        self.ownersTabClearPushButton.setGeometry(
            QtCore.QRect(260, 310, 131, 32))
        self.ownersTabClearPushButton.setObjectName("ownersTabClearPushButton")
        self.ownersTabSelectNewOwnerLabel = QtWidgets.QLabel(self.ownersTab)
        self.ownersTabSelectNewOwnerLabel.setGeometry(
            QtCore.QRect(420, 314, 131, 20))
        self.ownersTabSelectNewOwnerLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.ownersTabSelectNewOwnerLabel.setObjectName(
            "ownersTabSelectNewOwnerLabel")
        self.ownerTabNewOwnerComboBox = QtWidgets.QComboBox(self.ownersTab)
        self.ownerTabNewOwnerComboBox.setGeometry(
            QtCore.QRect(560, 312, 161, 26))
        self.ownerTabNewOwnerComboBox.setEditable(False)
        self.ownerTabNewOwnerComboBox.setObjectName("ownerTabNewOwnerComboBox")

        self.ownersTabChangeOwnerPushButton = QtWidgets.QPushButton(
            self.ownersTab, clicked=lambda: self.ownersTabChangeOwnerWarning()
        )

        self.ownersTabChangeOwnerPushButton.setGeometry(
            QtCore.QRect(730, 310, 151, 32))
        self.ownersTabChangeOwnerPushButton.setObjectName(
            "ownersTabChangeOwnerPushButton"
        )
        self.toolsTabWidget.addTab(self.ownersTab, "")
        # SPACE
        self.datasourcesTab = QtWidgets.QWidget()
        self.datasourcesTab.setObjectName("datasourcesTab")
        self.datasourcesTabDatasourceSearchLabel = QtWidgets.QLabel(
            self.datasourcesTab)
        self.datasourcesTabDatasourceSearchLabel.setGeometry(
            QtCore.QRect(12, 17, 51, 16)
        )
        self.datasourcesTabDatasourceSearchLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.datasourcesTabDatasourceSearchLabel.setObjectName(
            "datasourcesTabDatasourceSearchLabel"
        )
        self.datasourcesTabDatasourceTableWidget = QtWidgets.QTableWidget(
            self.datasourcesTab
        )
        self.datasourcesTabDatasourceTableWidget.setGeometry(
            QtCore.QRect(10, 50, 1171, 251)
        )
        self.datasourcesTabDatasourceTableWidget.setObjectName(
            "datasourcesTabDatasourceTableWidget"
        )
        self.datasourcesTabDatasourceTableWidget.setColumnCount(8)
        self.datasourcesTabDatasourceTableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            0, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            1, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            2, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            3, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            4, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            5, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            6, item)
        item = QtWidgets.QTableWidgetItem()
        self.datasourcesTabDatasourceTableWidget.setHorizontalHeaderItem(
            7, item)

        self.datasourcesTabDatasourceTableWidget.setColumnWidth(0, 30)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(1, 220)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(2, 220)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(3, 120)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(4, 80)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(5, 150)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(6, 150)
        self.datasourcesTabDatasourceTableWidget.setColumnWidth(7, 180)
        self.datasourcesTabcheckBoxDictionary = {}

        self.datasourcesTabSearchDatasourceLineEdit = QtWidgets.QLineEdit(
            self.datasourcesTab
        )
        self.datasourcesTabSearchDatasourceLineEdit.setEnabled(True)
        self.datasourcesTabSearchDatasourceLineEdit.setGeometry(
            QtCore.QRect(80, 15, 131, 21)
        )
        self.datasourcesTabSearchDatasourceLineEdit.setObjectName(
            "datasourcesTabSearchDatasourceLineEdit"
        )

        self.datasourcesTabGetDatasourcePushButton = QtWidgets.QPushButton(
            self.datasourcesTab, clicked=lambda: self.datasourcesTabGetDatasources()
        )

        self.datasourcesTabGetDatasourcePushButton.setGeometry(
            QtCore.QRect(230, 10, 161, 32)
        )
        self.datasourcesTabGetDatasourcePushButton.setAutoDefault(False)
        self.datasourcesTabGetDatasourcePushButton.setObjectName(
            "datasourcesTabGetDatasourcePushButton"
        )

        self.datasourcesTabSearchDatasourceLineEdit.returnPressed.connect(
            self.datasourcesTabGetDatasourcePushButton.click
        )

        self.datasourcesTabDeselectAllPushButton = QtWidgets.QPushButton(
            self.datasourcesTab,
            clicked=lambda: self.allTabsCheckBoxes("datasourcesTab", False),
        )

        self.datasourcesTabDeselectAllPushButton.setGeometry(
            QtCore.QRect(130, 310, 131, 32)
        )
        self.datasourcesTabDeselectAllPushButton.setObjectName(
            "datasourcesTabDeselectAllPushButton"
        )

        self.datasourcesTabSelectAllPushButton = QtWidgets.QPushButton(
            self.datasourcesTab,
            clicked=lambda: self.allTabsCheckBoxes("datasourcesTab", True),
        )

        self.datasourcesTabSelectAllPushButton.setGeometry(
            QtCore.QRect(10, 310, 121, 32)
        )
        self.datasourcesTabSelectAllPushButton.setObjectName(
            "datasourcesTabSelectAllPushButton"
        )

        self.datasourcesTabClearPushButton = QtWidgets.QPushButton(
            self.datasourcesTab,
            clicked=lambda: self.allTabsTableWidgetClear("datasourcesTab"),
        )

        self.datasourcesTabClearPushButton.setGeometry(
            QtCore.QRect(260, 310, 131, 32))
        self.datasourcesTabClearPushButton.setObjectName(
            "datasourcesTabClearPushButton"
        )
        self.datasourcesTabExtractSelectionComboBox = QtWidgets.QComboBox(
            self.datasourcesTab
        )
        self.datasourcesTabExtractSelectionComboBox.setGeometry(
            QtCore.QRect(560, 312, 161, 26)
        )
        self.datasourcesTabExtractSelectionComboBox.setEditable(False)
        self.datasourcesTabExtractSelectionComboBox.setObjectName(
            "datasourcesTabExtractSelectionComboBox"
        )
        self.datasourcesTabExtractSelectionComboBox.addItem("")
        self.datasourcesTabExtractSelectionComboBox.addItem("")

        self.datasourcesTabDownloadDatasourcePushButton = QtWidgets.QPushButton(
            self.datasourcesTab, clicked=lambda: self.datasourcesTabSelectDirectory()
        )

        self.datasourcesTabDownloadDatasourcePushButton.setGeometry(
            QtCore.QRect(730, 310, 151, 32)
        )
        self.datasourcesTabDownloadDatasourcePushButton.setObjectName(
            "datasourcesTabDownloadDatasourcePushButton"
        )
        self.datasourcesTabExtractLabel = QtWidgets.QLabel(self.datasourcesTab)
        self.datasourcesTabExtractLabel.setGeometry(
            QtCore.QRect(420, 314, 131, 20))
        self.datasourcesTabExtractLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.datasourcesTabExtractLabel.setObjectName(
            "datasourcesTabExtractLabel")
        self.toolsTabWidget.addTab(self.datasourcesTab, "")
        self.toolsLabel = QtWidgets.QLabel(self.centralwidget)
        self.toolsLabel.setGeometry(QtCore.QRect(8, 120, 161, 21))
        self.toolsLabel.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter
        )
        self.toolsLabel.setObjectName("toolsLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1233, 22))
        self.menubar.setObjectName("menubar")
        self.menuInfo = QtWidgets.QMenu(self.menubar)
        self.menuInfo.setObjectName("menuInfo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuInfo.addAction(self.actionAbout)
        self.menubar.addAction(self.menuInfo.menuAction())

        self.tableauServer = TSC.Server("")
        self.workbooks = []
        self.datasources = []
        self.users = []
        self.userNameIdDictionary = {}
        self.ownersTabConnectionsDictionary = {}
        self.connectionAndPassword = {}
        self.datasourcesTabDatasources = []

        self.retranslateUi(MainWindow)
        self.toolsTabWidget.setCurrentIndex(0)
        self.datasourcesTabExtractSelectionComboBox.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Tableau Server Tools"))
        self.loginGroupBox.setTitle(_translate(
            "MainWindow", "Tableau Server Login"))
        self.loginEnvLabel.setText(_translate("MainWindow", "Environment:"))
        self.loginComboBox.setItemText(
            0, _translate("MainWindow", "Production"))
        self.loginComboBox.setItemText(1, _translate("MainWindow", "QA"))
        self.loginUserLabel.setText(_translate("MainWindow", "Username:"))
        self.loginPwdLabel.setText(_translate("MainWindow", "Password:"))
        self.loginPushButton.setText(_translate("MainWindow", "Login"))
        self.loginLogoutPushButton.setText(_translate("MainWindow", "Logout"))
        self.loginStatusLabel.setText(_translate("MainWindow", "Status:"))
        self.extractTabGetJobsPushButton.setText(
            _translate("MainWindow", "Get Jobs"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Type"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Status"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Priority"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Created At"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Pending (sec)"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Started At"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Runtime (sec)"))
        item = self.extractTabJobTableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Job ID"))
        self.extractTabTerminateJobsPushButton.setText(
            _translate("MainWindow", "Terminate Jobs")
        )
        self.extractTabSearchJobLineEdit.setPlaceholderText(
            _translate("MainWindow", "e.g. Rollup")
        )
        self.extractTabJobComboBox.setItemText(
            0, _translate("MainWindow", "Open"))
        self.extractTabJobComboBox.setItemText(
            1, _translate("MainWindow", '"Pending"'))
        self.extractTabJobComboBox.setItemText(
            2, _translate("MainWindow", '"In Progress"')
        )
        self.extractTabJobComboBox.setItemText(
            3, _translate("MainWindow", "Search"))
        self.extractTabSelectAllJobsPushButton.setText(
            _translate("MainWindow", "Select All")
        )
        self.extractTabDeselectAllJobsPushButton.setText(
            _translate("MainWindow", "Deselect All")
        )
        self.extractTabClearPushButton.setText(
            _translate("MainWindow", "Clear Table"))
        self.extractTabJobsLabel.setText(_translate("MainWindow", "Jobs:"))
        self.extractTabJobSearchLabel.setText(
            _translate("MainWindow", "Search:"))
        self.toolsTabWidget.setTabText(
            self.toolsTabWidget.indexOf(self.extractTab),
            _translate("MainWindow", "Extract Jobs"),
        )
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Type"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Project"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Size"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Created At"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Updated At"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "# Conn."))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Conn. Types"))
        item = self.ownersTabContentTableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Resource ID"))
        self.ownersTabLoadOwnersPushButton.setText(
            _translate("MainWindow", "Load Owners")
        )
        self.ownersTabSelectOwnerLabel.setText(
            _translate("MainWindow", "Select Owner:")
        )
        self.ownersTabGetContentPushButton.setText(
            _translate("MainWindow", "Get Content")
        )
        self.ownersTabSelectAllPushButton.setText(
            _translate("MainWindow", "Select All")
        )
        self.ownersTabDeselectAllPushButton.setText(
            _translate("MainWindow", "Deselect All")
        )
        self.ownersTabClearPushButton.setText(
            _translate("MainWindow", "Clear Table"))
        self.ownersTabSelectNewOwnerLabel.setText(
            _translate("MainWindow", "Select New Owner:")
        )
        self.ownersTabChangeOwnerPushButton.setText(
            _translate("MainWindow", "Change Owner")
        )
        self.toolsTabWidget.setTabText(
            self.toolsTabWidget.indexOf(self.ownersTab),
            _translate("MainWindow", "Content Owners"),
        )
        self.datasourcesTabDatasourceSearchLabel.setText(
            _translate("MainWindow", "Search:")
        )
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Project"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Conn. Type"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Has Extract"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Created At"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Updated At"))
        item = self.datasourcesTabDatasourceTableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Data Source ID"))
        self.datasourcesTabSearchDatasourceLineEdit.setPlaceholderText(
            _translate("MainWindow", "default: all")
        )
        self.datasourcesTabGetDatasourcePushButton.setText(
            _translate("MainWindow", "Get Data Sources")
        )
        self.datasourcesTabDeselectAllPushButton.setText(
            _translate("MainWindow", "Deselect All")
        )
        self.datasourcesTabSelectAllPushButton.setText(
            _translate("MainWindow", "Select All")
        )
        self.datasourcesTabClearPushButton.setText(
            _translate("MainWindow", "Clear Table")
        )
        self.datasourcesTabExtractSelectionComboBox.setItemText(
            0, _translate("MainWindow", "include")
        )
        self.datasourcesTabExtractSelectionComboBox.setItemText(
            1, _translate("MainWindow", "exclude")
        )
        self.datasourcesTabDownloadDatasourcePushButton.setText(
            _translate("MainWindow", "Download")
        )
        self.datasourcesTabExtractLabel.setText(
            _translate("MainWindow", "Extract:"))
        self.toolsTabWidget.setTabText(
            self.toolsTabWidget.indexOf(self.datasourcesTab),
            _translate("MainWindow", "Data Sources"),
        )
        self.toolsLabel.setText(
            _translate(
                "MainWindow",
                '<html><head/><body><p><span style=" font-size:10.5pt; color:#333333;">Tableau Server Utility Tools</span></p></body></html>',
            )
        )
        self.menuInfo.setTitle(_translate("MainWindow", "Info"))
        self.actionAbout.setText(_translate("MainWindow", "About"))

    def tableauServerLogin(self):
        if self.loginComboBox.currentText() == "Production":
            url = TABLEAU_SERVER_PROD_URL
        elif self.loginComboBox.currentText() == "QA":
            url = TABLEAU_SERVER_QA_URL
        else:
            url = None

        server = TSC.Server(url)
        server.add_http_options({"timeout": 2})

        username = self.loginUserLineEdit.text()
        password = self.loginPwdLineEdit.text()

        try:
            server.use_server_version()
        except Exception:
            self.loginSuccessLabel.setText(
                '<html><head/><body><p><span style=" color:#b94226;">Error! Check SDP!</span></p></body></html>'
            )
            return
        try:
            tableau_auth = TSC.TableauAuth(username, password)
            server.auth.sign_in(tableau_auth)
            self.loginSuccessLabel.setText(
                '<html><head/><body><p><span style=" color:#1a7f12;">Successfully logged in!</span></p></body></html>'
            )
            self.toolsTabWidget.setEnabled(True)
            self.tableauServer = server
            self.loginComboBox.setEnabled(False)
            self.loginUserLineEdit.setEnabled(False)
            self.loginPwdLineEdit.setEnabled(False)
            self.loginPushButton.setEnabled(False)
            self.loginLogoutPushButton.setEnabled(True)
        except Exception:
            self.loginSuccessLabel.setText(
                '<html><head/><body><p><span style=" color:#b94226;">Incorrect login info!</span></p></body></html>'
            )

    def tableauServerLogout(self):
        self.tableauServer.auth.sign_out()
        for tab in ["extractTab", "ownersTab", "datasourcesTab"]:
            self.allTabsTableWidgetClear(tab)
        self.ownerTabNewOwnerComboBox.clear()
        self.ownersTabOwnersComboBox.clear()
        self.toolsTabWidget.setEnabled(False)
        self.loginComboBox.setEnabled(True)
        self.loginUserLineEdit.setEnabled(True)
        self.loginPwdLineEdit.setEnabled(True)
        self.loginPushButton.setEnabled(True)
        self.loginLogoutPushButton.setEnabled(False)
        self.loginSuccessLabel.setText(
            "<html><head/><body><p>Logged out!</p></body></html>"
        )

    def extractTabJobComboBoxChange(self, currentIndex):
        if currentIndex != 3:
            self.extractTabSearchJobLineEdit.setEnabled(False)
            palette = QtGui.QPalette()
            brush = QtGui.QBrush(QtGui.QColor(196, 197, 200))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
            brush = QtGui.QBrush(QtGui.QColor(196, 197, 200))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Inactive,
                             QtGui.QPalette.Base, brush)
            brush = QtGui.QBrush(QtGui.QColor(236, 236, 236))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Disabled,
                             QtGui.QPalette.Base, brush)
            self.extractTabSearchJobLineEdit.setPalette(palette)
        else:
            self.extractTabSearchJobLineEdit.setEnabled(True)
            palette = QtGui.QPalette()
            brush = QtGui.QBrush(QtGui.QColor(250, 251, 255))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
            brush = QtGui.QBrush(QtGui.QColor(250, 251, 255))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Inactive,
                             QtGui.QPalette.Base, brush)
            brush = QtGui.QBrush(QtGui.QColor(236, 236, 236))
            brush.setStyle(QtCore.Qt.SolidPattern)
            palette.setBrush(QtGui.QPalette.Disabled,
                             QtGui.QPalette.Base, brush)
            self.extractTabSearchJobLineEdit.setPalette(palette)

    def tableauServerGetJobs(self):
        self.allTabsTableWidgetClear("extractTab")
        if self.tableauServer.is_signed_in() is not True:
            self.tableauServerLogin()
        searchJob = self.extractTabSearchJobLineEdit.text().lower()
        req_option = TSC.RequestOptions()
        # Filter for Progress Status
        if self.extractTabJobComboBox.currentIndex() == 1:
            progress_operator = TSC.RequestOptions.Operator.LessThan
        elif self.extractTabJobComboBox.currentIndex() == 2:
            progress_operator = TSC.RequestOptions.Operator.Equals
        else:
            progress_operator = TSC.RequestOptions.Operator.LessThanOrEqual
        req_option.filter.add(
            TSC.Filter(TSC.RequestOptions.Field.Progress, progress_operator, 0)
        )
        # Extract jobs
        req_option.filter.add(
            TSC.Filter(
                TSC.RequestOptions.Field.JobType,
                TSC.RequestOptions.Operator.Equals,
                "refresh_extracts",
            )
        )
        # Sort by create datetime
        req_option.sort.add(
            TSC.Sort(
                TSC.RequestOptions.Field.CreatedAt, TSC.RequestOptions.Direction.Desc
            )
        )
        # Change baseurl to include all fields
        baseurl = self.tableauServer.jobs.baseurl + "?fields=_all_"
        # Make server request
        server_response = self.tableauServer.jobs.get_request(
            baseurl, req_option)
        # Parse job objects
        jobs = TSC.models.BackgroundJobItem.from_response(
            server_response.content, self.tableauServer.namespace
        )

        if len(jobs) > 0:
            # Create checkboxes
            extractTabcheckBoxItem = QtWidgets.QTableWidgetItem()
            extractTabcheckBoxItem.setFlags(
                QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled
            )
            extractTabcheckBoxItem.setCheckState(QtCore.Qt.Unchecked)

            # Get current time in UTC
            now_utc = datetime.utcnow()

            # Add data to table
            i = 0
            for job in jobs:
                if self.extractTabJobComboBox.currentIndex() == 3 and searchJob:
                    if searchJob in str(job.name).lower():
                        pass
                    else:
                        continue
                self.extractTabJobTableWidget.setRowCount(i + 1)
                self.extractTabcheckBoxDictionary[i] = (
                    extractTabcheckBoxItem.clone(),
                    job.id,
                )
                self.extractTabJobTableWidget.setItem(
                    i, 0, self.extractTabcheckBoxDictionary[i][0]
                )
                self.extractTabJobTableWidget.setItem(
                    i, 1, QtWidgets.QTableWidgetItem(job.name)
                )
                self.extractTabJobTableWidget.setItem(
                    i, 2, QtWidgets.QTableWidgetItem(job.subtitle)
                )
                self.extractTabJobTableWidget.setItem(
                    i, 3, QtWidgets.QTableWidgetItem(job.status)
                )
                self.extractTabJobTableWidget.setItem(
                    i, 4, QtWidgets.QTableWidgetItem(job.priority)
                )
                self.extractTabJobTableWidget.setItem(
                    i,
                    5,
                    QtWidgets.QTableWidgetItem(
                        job.created_at.strftime("%Y-%m-%d %H:%M:%S")
                    ),
                )
                if job.started_at:
                    self.extractTabJobTableWidget.setItem(
                        i,
                        6,
                        QtWidgets.QTableWidgetItem(
                            str(
                                (
                                    job.started_at.replace(tzinfo=None)
                                    - job.created_at.replace(tzinfo=None)
                                ).seconds
                            )
                        ),
                    )
                    self.extractTabJobTableWidget.setItem(
                        i,
                        7,
                        QtWidgets.QTableWidgetItem(
                            job.started_at.strftime("%Y-%m-%d %H:%M:%S")
                        ),
                    )
                    self.extractTabJobTableWidget.setItem(
                        i,
                        8,
                        QtWidgets.QTableWidgetItem(
                            str((now_utc - job.started_at.replace(tzinfo=None)).seconds)
                        ),
                    )
                else:
                    self.extractTabJobTableWidget.setItem(
                        i,
                        6,
                        QtWidgets.QTableWidgetItem(
                            str((now_utc - job.created_at.replace(tzinfo=None)).seconds)
                        ),
                    )
                    self.extractTabJobTableWidget.setItem(
                        i, 7, QtWidgets.QTableWidgetItem(None)
                    )
                    self.extractTabJobTableWidget.setItem(
                        i, 8, QtWidgets.QTableWidgetItem(None)
                    )
                self.extractTabJobTableWidget.setItem(
                    i, 9, QtWidgets.QTableWidgetItem(job.id)
                )
                i += 1

    def allTabsTableWidgetClear(self, tab):
        if tab == "extractTab":
            tableWidget = self.extractTabJobTableWidget
            self.extractTabcheckBoxDictionary = {}
        elif tab == "ownersTab":
            tableWidget = self.ownersTabContentTableWidget
            self.ownersTabcheckBoxDictionary = {}
        elif tab == "datasourcesTab":
            tableWidget = self.datasourcesTabDatasourceTableWidget
            self.datasourcesTabcheckBoxDictionary = {}
        tableWidget.clearContents()
        tableWidget.setRowCount(0)

    def ownersTabTableWidgetClear(self):
        self.allTabsTableWidgetClear("ownersTab")

    def allTabsCheckBoxes(self, tab, checkAll):
        if tab == "extractTab":
            checkBoxDictionary = self.extractTabcheckBoxDictionary
        elif tab == "ownersTab":
            checkBoxDictionary = self.ownersTabcheckBoxDictionary
        elif tab == "datasourcesTab":
            checkBoxDictionary = self.datasourcesTabcheckBoxDictionary
        if checkAll:
            for value in checkBoxDictionary.values():
                value[0].setCheckState(QtCore.Qt.Checked)
        else:
            for value in checkBoxDictionary.values():
                value[0].setCheckState(QtCore.Qt.Unchecked)

    def extractTabTerminateJobsWarning(self):
        self.extractTabTerminateJobsList = []
        for key, value in self.extractTabcheckBoxDictionary.items():
            if value[0].checkState() == 2:
                self.extractTabTerminateJobsList.append((key, value[1]))

        msg = QtWidgets.QMessageBox()
        if len(self.extractTabTerminateJobsList) > 0:
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(
                "Are you sure you want to terminate the selected jobs?")
            msg.setWindowTitle("Terminate Jobs")
            msg.setStandardButtons(
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.Cancel
            )
            msg.buttonClicked.connect(self.extractTabTerminateJobs)
            msg.exec_()
        else:
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Please select at least one job to terminate!")
            msg.setWindowTitle("Terminate Jobs")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

    def extractTabTerminateJobs(self, clickedButton):
        if clickedButton.text() == "Cancel":
            pass
        elif clickedButton.text() == "&Yes":
            for job in self.extractTabTerminateJobsList:
                self.tableauServer.jobs.cancel(job[1])
                try:
                    status = self.tableauServer.jobs.get_by_id(
                        job[1]).finish_code
                    if status == "2":
                        item = QtWidgets.QTableWidgetItem("Terminated")
                        item.setForeground(QtGui.QBrush(
                            QtGui.QColor(185, 66, 38)))
                        self.extractTabJobTableWidget.setItem(job[0], 3, item)
                    elif status == "1":
                        item = QtWidgets.QTableWidgetItem("Error")
                        item.setForeground(QtGui.QBrush(
                            QtGui.QColor(185, 66, 38)))
                        self.extractTabJobTableWidget.setItem(job[0], 3, item)
                    elif status == "0":
                        item = QtWidgets.QTableWidgetItem("Completed")
                        item.setForeground(QtGui.QBrush(
                            QtGui.QColor(26, 127, 18)))
                        self.extractTabJobTableWidget.setItem(job[0], 3, item)
                except Exception:
                    pass

    def ownersTabLoadOwners(self):
        self.ownersTabTableWidgetClear()
        self.ownerTabNewOwnerComboBox.clear()
        self.ownersTabOwnersComboBox.clear()
        if self.tableauServer.is_signed_in() is not True:
            self.tableauServerLogin()
        self.workbooks = []
        for workbook in TSC.Pager(self.tableauServer.workbooks):
            self.workbooks.append(workbook)
        self.datasources = []
        for datasource in TSC.Pager(self.tableauServer.datasources):
            self.datasources.append(datasource)
        self.users = []
        for user in TSC.Pager(self.tableauServer.users):
            self.users.append(user)

        userDictionary = {}
        self.userNameIdDictionary = {}
        self.users.sort(key=lambda x: x.name)
        for user in self.users:
            userDictionary[user.id] = user.name
            self.userNameIdDictionary[user.name] = user.id
            self.ownerTabNewOwnerComboBox.addItem(user.name)

        contentOwners = []
        for resource in self.workbooks + self.datasources:
            ownerId = resource.owner_id
            userName = userDictionary[ownerId]
            if (ownerId, userName) not in contentOwners:
                contentOwners.append((ownerId, userName))

        contentOwners.sort(key=lambda x: x[1])
        for contentOwner in contentOwners:
            self.ownersTabOwnersComboBox.addItem(contentOwner[1])

    def ownersTabGetContent(self):
        self.allTabsTableWidgetClear("ownersTab")
        currentOwner = self.ownersTabOwnersComboBox.currentText()
        try:
            currentOwnerId = self.userNameIdDictionary[currentOwner]
        except Exception:
            return

        # Create checkboxes
        ownersTabcheckBoxItem = QtWidgets.QTableWidgetItem()
        ownersTabcheckBoxItem.setFlags(
            QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled
        )
        ownersTabcheckBoxItem.setCheckState(QtCore.Qt.Unchecked)

        i = 0
        currentOwnerResources = []
        for resource in self.workbooks + self.datasources:
            if resource.owner_id == currentOwnerId:
                currentOwnerResources.append(resource)
                self.ownersTabContentTableWidget.setRowCount(i + 1)
                self.ownersTabContentTableWidget.setItem(
                    i, 1, QtWidgets.QTableWidgetItem(resource.name)
                )
                if isinstance(resource, TSC.models.workbook_item.WorkbookItem):
                    type = "Workbook"
                    self.ownersTabContentTableWidget.setItem(
                        i, 4, QtWidgets.QTableWidgetItem(str(resource.size))
                    )
                else:
                    type = "Datasource"
                    self.ownersTabContentTableWidget.setItem(
                        i, 4, QtWidgets.QTableWidgetItem(None)
                    )
                self.ownersTabcheckBoxDictionary[i] = (
                    ownersTabcheckBoxItem.clone(),
                    resource,
                    type,
                )
                self.ownersTabContentTableWidget.setItem(
                    i, 0, self.ownersTabcheckBoxDictionary[i][0]
                )
                self.ownersTabContentTableWidget.setItem(
                    i, 2, QtWidgets.QTableWidgetItem(type)
                )
                self.ownersTabContentTableWidget.setItem(
                    i, 3, QtWidgets.QTableWidgetItem(resource.project_name)
                )
                self.ownersTabContentTableWidget.setItem(
                    i,
                    5,
                    QtWidgets.QTableWidgetItem(
                        resource.created_at.strftime("%Y-%m-%d %H:%M:%S")
                    ),
                )
                self.ownersTabContentTableWidget.setItem(
                    i,
                    6,
                    QtWidgets.QTableWidgetItem(
                        resource.updated_at.strftime("%Y-%m-%d %H:%M:%S")
                    ),
                )
                self.ownersTabContentTableWidget.setItem(
                    i, 9, QtWidgets.QTableWidgetItem(resource.id)
                )
                i += 1
        i = 0
        self.ownersTabConnectionsDictionary = {}
        for resource in currentOwnerResources:
            if isinstance(resource, TSC.models.workbook_item.WorkbookItem):
                self.tableauServer.workbooks.populate_connections(resource)
            else:
                self.tableauServer.datasources.populate_connections(resource)
            self.ownersTabContentTableWidget.setItem(
                i, 7, QtWidgets.QTableWidgetItem(
                    str(len(resource.connections)))
            )
            self.ownersTabContentTableWidget.setItem(
                i,
                8,
                QtWidgets.QTableWidgetItem(
                    ",".join(
                        list(
                            set(
                                [
                                    connection.connection_type
                                    for connection in resource.connections
                                ]
                            )
                        )
                    )
                ),
            )
            self.ownersTabConnectionsDictionary[resource.id] = resource.connections
            i += 1

    def ownersTabChangeOwnerWarning(self):
        self.ownersTabChangeOwnerList = []
        for key, value in self.ownersTabcheckBoxDictionary.items():
            if value[0].checkState() == 2:
                self.ownersTabChangeOwnerList.append((key, value[1], value[2]))

        msg = QtWidgets.QMessageBox()
        if len(self.ownersTabChangeOwnerList) > 0:
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(
                "Are you sure you want to change the owner for the selected resources?"
            )
            msg.setWindowTitle("Change Owner")
            msg.setStandardButtons(
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.Cancel
            )
            msg.buttonClicked.connect(self.ownersTabGetConnections)
            msg.exec_()
        else:
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText(
                "Please select at least one resource for which you want to change the owner!"
            )
            msg.setWindowTitle("Change Owner")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

    def ownersTabGetConnections(self, clickedButton):
        if clickedButton.text() == "Cancel":
            pass
        elif clickedButton.text() == "&Yes":
            uniqueConnections = []
            for indexResourceType in self.ownersTabChangeOwnerList:
                connections = self.ownersTabConnectionsDictionary[
                    indexResourceType[1].id
                ]
                for connection in connections:
                    if (
                        connection.connection_type != "sqlproxy"
                        and connection.server_address
                    ):
                        uniqueConnections.append(
                            (
                                connection.connection_type,
                                connection.server_address,
                                connection.server_port,
                                connection.username,
                            )
                        )
            uniqueConnections = list(set(uniqueConnections))
            self.ownersTabConnectionInput(uniqueConnections)

            self.ownersTabChangeOwner()

    def ownersTabConnectionInput(self, uniqueConnections):
        self.connectionAndPassword = {}
        for connection in uniqueConnections:
            password, ok = QtWidgets.QInputDialog.getText(
                None,
                "Connection Credentials",
                f"<html><p><strong>Type:&nbsp;</strong>{connection[0]}<br><strong>Server:&nbsp;</strong>{connection[1]}<br><strong>Port:&nbsp;</strong>{connection[2]}<br><strong>Username:&nbsp;</strong>{connection[3]}</p><p><strong>Password</strong>:</p></html>",
                echo=QtWidgets.QLineEdit.Password,
            )
            if ok and password:
                self.connectionAndPassword[connection] = password

    def ownersTabChangeOwner(self):
        if self.tableauServer.is_signed_in() is not True:
            self.tableauServerLogin()
        ownersTabChangedOwners = []
        for indexResourceType in self.ownersTabChangeOwnerList:
            connections = self.ownersTabConnectionsDictionary[indexResourceType[1].id]
            totalConnectionNumber = len(connections)
            availableConnectionNumber = 0
            for connection in connections:
                if (
                    connection.connection_type != "sqlproxy"
                    and connection.server_address
                ):
                    connectionInfo = (
                        connection.connection_type,
                        connection.server_address,
                        connection.server_port,
                        connection.username,
                    )
                    if connectionInfo in self.connectionAndPassword:
                        availableConnectionNumber += 1
                else:
                    availableConnectionNumber += 1
            if availableConnectionNumber == totalConnectionNumber:
                ownersTabChangedOwners.append((indexResourceType, connections))

        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setWindowTitle("Change Owner")
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)

        resourcesChangedOwners = []

        if len(ownersTabChangedOwners) > 0:
            newOwnerId = self.userNameIdDictionary[
                self.ownerTabNewOwnerComboBox.currentText()
            ]
            # Change actual owner and update connection credentials
            for indexResourceTypeConnections in ownersTabChangedOwners:
                index = indexResourceTypeConnections[0][0]
                resource = indexResourceTypeConnections[0][1]
                type = indexResourceTypeConnections[0][2]
                connections = indexResourceTypeConnections[1]
                resource.owner_id = newOwnerId
                if type == "Workbook":
                    self.tableauServer.workbooks.update(resource)
                    self.workbooks[self.workbooks.index(resource)] = resource
                    for connection in connections:
                        connectionInfo = (
                            connection.connection_type,
                            connection.server_address,
                            connection.server_port,
                            connection.username,
                        )
                        if connectionInfo in self.connectionAndPassword:
                            connection.password = self.connectionAndPassword[
                                connectionInfo
                            ]
                            connection.embed_password = True
                            self.tableauServer.workbooks.update_connection(
                                resource, connection
                            )
                elif type == "Datasource":
                    self.tableauServer.datasources.update(resource)
                    self.datasources[self.datasources.index(
                        resource)] = resource
                    for connection in connections:
                        connectionInfo = (
                            connection.connection_type,
                            connection.server_address,
                            connection.server_port,
                            connection.username,
                        )
                        if connectionInfo in self.connectionAndPassword:
                            connection.password = self.connectionAndPassword[
                                connectionInfo
                            ]
                            connection.embed_password = True
                            self.tableauServer.datasources.update_connection(
                                resource, connection
                            )
                resourcesChangedOwners.append(
                    self.ownersTabContentTableWidget.itemAt(index, 1).text()
                )

            if len(resourcesChangedOwners) > 0:
                msg.setText(
                    f"Changed owner and updated connection credentials for {len(resourcesChangedOwners)} resource(s). Please reload content owners."
                )
            else:
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(
                    "Did not change owner of any resources. Please provide all connection credentials!"
                )
        else:
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(
                "Did not change owner of any resources. Please provide all connection credentials!"
            )
        msg.exec_()

    def datasourcesTabGetDatasources(self):
        self.allTabsTableWidgetClear("datasourcesTab")
        if self.tableauServer.is_signed_in() is not True:
            self.tableauServerLogin()
        self.datasourcesTabDatasources = []
        for datasource in TSC.Pager(self.tableauServer.datasources):
            self.datasourcesTabDatasources.append(datasource)

        # Create checkboxes
        datasourcesTabcheckBoxItem = QtWidgets.QTableWidgetItem()
        datasourcesTabcheckBoxItem.setFlags(
            QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled
        )
        datasourcesTabcheckBoxItem.setCheckState(QtCore.Qt.Unchecked)

        i = 0

        searchDatasource = self.datasourcesTabSearchDatasourceLineEdit.text()

        for datasource in self.datasourcesTabDatasources:
            if searchDatasource:
                if searchDatasource.lower() not in str(datasource.name).lower():
                    continue
            self.datasourcesTabDatasourceTableWidget.setRowCount(i + 1)
            self.datasourcesTabcheckBoxDictionary[i] = (
                datasourcesTabcheckBoxItem.clone(),
                datasource.id,
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 0, self.datasourcesTabcheckBoxDictionary[i][0]
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 1, QtWidgets.QTableWidgetItem(datasource.name)
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 2, QtWidgets.QTableWidgetItem(datasource.project_name)
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 3, QtWidgets.QTableWidgetItem(datasource.datasource_type)
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 4, QtWidgets.QTableWidgetItem(str(datasource.has_extracts))
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i,
                5,
                QtWidgets.QTableWidgetItem(
                    datasource.created_at.strftime("%Y-%m-%d %H:%M:%S")
                ),
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i,
                6,
                QtWidgets.QTableWidgetItem(
                    datasource.updated_at.strftime("%Y-%m-%d %H:%M:%S")
                ),
            )
            self.datasourcesTabDatasourceTableWidget.setItem(
                i, 7, QtWidgets.QTableWidgetItem(datasource.id)
            )
            i += 1

    def datasourcesTabSelectDirectory(self):
        include_extract = False
        if self.datasourcesTabExtractSelectionComboBox.currentIndex() == 0:
            include_extract = True

        downloadDatasources = []
        for value in self.datasourcesTabcheckBoxDictionary.values():
            if value[0].checkState() == 2:
                downloadDatasources.append(value[1])

        if len(downloadDatasources) > 0:
            dialog = QtWidgets.QFileDialog()
            folder_path = dialog.getExistingDirectory(
                None, "Select Download Folder")
            if folder_path:
                self.datasourcesTabDownloadDatasource(
                    downloadDatasources, folder_path, include_extract
                )
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Please select at least one datasource to download!")
            msg.setWindowTitle("Download Datasources")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

    def datasourcesTabDownloadDatasource(
        self, downloadDatasources, path, include_extract
    ):
        for datasource in downloadDatasources:
            self.tableauServer.datasources.download(
                datasource, filepath=path, include_extract=include_extract
            )


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
